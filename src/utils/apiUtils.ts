import { PredictionResult, AdviceResponse, ApiError } from '@/types';

const API_URL = import.meta.env.VITE_MODEL_API_URL || '';
const API_KEY = import.meta.env.VITE_API_KEY || '';
const ADVICE_API_URL = import.meta.env.VITE_ADVICE_API_URL || '';
const DEMO_MODE = !API_URL;

// Demo data for testing
const DEMO_RESULTS: PredictionResult[] = [
  {
    label: "LEAF_BLIGHT",
    probs: {
      "ALGAL_LEAF_SPOT": 0.12,
      "HEALTHY_LEAF": 0.03,
      "LEAF_BLIGHT": 0.78,
      "PHOMOPSIS_LEAF_SPOT": 0.07
    },
    latency_ms: 245,
    model_version: "demo-model-v1"
  },
  {
    label: "HEALTHY_LEAF", 
    probs: {
      "ALGAL_LEAF_SPOT": 0.05,
      "HEALTHY_LEAF": 0.89,
      "LEAF_BLIGHT": 0.04,
      "PHOMOPSIS_LEAF_SPOT": 0.02
    },
    latency_ms: 198,
    model_version: "demo-model-v1"
  }
];

export const predictDisease = async (imageBase64: string): Promise<PredictionResult> => {
  if (DEMO_MODE) {
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 1500 + Math.random() * 2000));
    
    // Return random demo result
    const randomResult = DEMO_RESULTS[Math.floor(Math.random() * DEMO_RESULTS.length)];
    console.log('üü° Demo mode: Returning simulated result', randomResult);
    return randomResult;
  }

  try {
    const headers: HeadersInit = {
      'Content-Type': 'application/json',
    };
    
    if (API_KEY) {
      headers.Authorization = `Bearer ${API_KEY}`;
    }

    const response = await fetch(API_URL, {
      method: 'POST',
      headers,
      body: JSON.stringify({
        image_base64: imageBase64,
        options: { return_probs: true }
      }),
    });

    if (!response.ok) {
      const error: ApiError = {
        message: '‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
        code: response.status.toString()
      };
      throw error;
    }

    const result = await response.json();
    console.log('‚úÖ API Success:', result);
    return result;
    
  } catch (error) {
    console.error('‚ùå API Error:', error);
    
    if (error instanceof Error) {
      const apiError: ApiError = {
        message: error.message.includes('fetch') 
          ? '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï'
          : error.message
      };
      throw apiError;
    }
    
    throw error;
  }
};

export const getAdvice = async (
  diagnosis: string,
  probs: Record<string, number>,
  question?: string
): Promise<AdviceResponse> => {
  if (DEMO_MODE || !ADVICE_API_URL) {
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 1500));
    
    // Demo advice based on diagnosis
    const demoAdvice: Record<string, AdviceResponse> = {
      LEAF_BLIGHT: {
        title: "‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ö‡πÑ‡∏´‡∏°‡πâ",
        bullets: [
          "‡∏ï‡∏±‡∏î‡πÅ‡∏ï‡πà‡∏á‡πÉ‡∏ö‡πÅ‡∏•‡∏∞‡∏Å‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡πÇ‡∏£‡∏Ñ ‡∏ó‡∏¥‡πâ‡∏á‡πÉ‡∏´‡πâ‡∏û‡πâ‡∏ô‡πÅ‡∏õ‡∏•‡∏á",
          "‡∏û‡πà‡∏ô‡∏™‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≥‡∏à‡∏±‡∏î‡πÇ‡∏£‡∏Ñ‡∏û‡∏∑‡∏ä‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏â‡∏•‡∏≤‡∏Å",
          "‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡πÉ‡∏ô‡∏™‡∏ß‡∏ô ‡πÇ‡∏î‡∏¢‡πÄ‡∏ß‡πâ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°",
          "‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏≤‡∏î‡∏ã‡πâ‡∏≥‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡∏ô‡∏ó‡∏µ"
        ],
        disclaimer: "‡πÇ‡∏õ‡∏£‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡∏∏‡∏î‡πÄ‡∏•‡πá‡∏Å ‡πÜ ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏â‡∏•‡∏≤‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏Ñ‡∏£‡πà‡∏á‡∏Ñ‡∏£‡∏±‡∏î"
      },
      ALGAL_LEAF_SPOT: {
        title: "‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ö‡∏à‡∏∏‡∏î‡∏™‡∏ô‡∏¥‡∏°",
        bullets: [
          "‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡πÇ‡∏£‡∏Ñ‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏•‡∏≤‡∏¢",
          "‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏≠‡∏≤‡∏Å‡∏≤‡∏®",
          "‡∏û‡πà‡∏ô‡∏™‡∏≤‡∏£‡∏ó‡∏≠‡∏á‡πÅ‡∏î‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥",
          "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á"
        ],
        disclaimer: "‡πÇ‡∏õ‡∏£‡∏î‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏•‡∏∞‡∏â‡∏•‡∏≤‡∏Å‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏Ñ‡∏£‡πà‡∏á‡∏Ñ‡∏£‡∏±‡∏î"
      },
      PHOMOPSIS_LEAF_SPOT: {
        title: "‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ö‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠ Phomopsis",
        bullets: [
          "‡∏ï‡∏±‡∏î‡πÅ‡∏ï‡πà‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡πÇ‡∏£‡∏Ñ‡∏ó‡∏¥‡πâ‡∏á",
          "‡πÉ‡∏ä‡πâ‡∏™‡∏≤‡∏£‡∏Ü‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏£‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°",
          "‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡πÉ‡∏´‡πâ‡∏î‡∏µ ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏ô‡πâ‡∏≥‡∏Ç‡∏±‡∏á",
          "‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏£‡πà‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡∏Ç‡∏≤‡∏†‡∏¥‡∏ö‡∏≤‡∏•‡πÉ‡∏ô‡∏™‡∏ß‡∏ô"
        ],
        disclaimer: "‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥"
      },
      HEALTHY_LEAF: {
        title: "‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏±‡∏Å‡∏©‡∏≤",
        bullets: [
          "‡πÉ‡∏ö‡∏°‡∏µ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏î‡∏µ ‡∏Ñ‡∏ß‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô",
          "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥",
          "‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πã‡∏¢‡πÅ‡∏•‡∏∞‡∏ô‡πâ‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°",
          "‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÇ‡∏£‡∏Ñ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏≤‡∏†‡∏¥‡∏ö‡∏≤‡∏•"
        ],
        disclaimer: "‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏¥‡πà‡∏á‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏û‡∏∑‡∏ä"
      }
    };
    
    const advice = demoAdvice[diagnosis] || demoAdvice.HEALTHY_LEAF;
    console.log('üü° Demo mode: Returning simulated advice', advice);
    return advice;
  }

  try {
    const headers: HeadersInit = {
      'Content-Type': 'application/json',
    };
    
    if (API_KEY) {
      headers.Authorization = `Bearer ${API_KEY}`;
    }

    const response = await fetch(`${ADVICE_API_URL}/advise`, {
      method: 'POST',
      headers,
      body: JSON.stringify({
        diagnosis,
        probs,
        question: question || undefined
      }),
    });

    if (!response.ok) {
      const error: ApiError = {
        message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏≠‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
        code: response.status.toString()
      };
      throw error;
    }

    const result = await response.json();
    console.log('‚úÖ Advice API Success:', result);
    return result;
    
  } catch (error) {
    console.error('‚ùå Advice API Error:', error);
    
    if (error instanceof Error) {
      const apiError: ApiError = {
        message: error.message.includes('fetch') 
          ? '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï'
          : error.message
      };
      throw apiError;
    }
    
    throw error;
  }
};

export const isDemoMode = () => DEMO_MODE;